plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

fabricApi {
    configureDataGeneration()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modImplementation "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

String issues = rootProject.mod_issues_page

if (issues.isEmpty()) {
    issues = rootProject.mod_sources_page

    if (issues.endsWith("/")) {
        issues += "issues"
    } else {
        issues += "/issues"
    }
}

def props = [
    "id": rootProject.mod_id,
    "version": project.version,
    "name": rootProject.mod_name,
    "description": rootProject.mod_description,
    "home_page": rootProject.mod_home_page,
    "sources_page": rootProject.mod_sources_page,
    "issues_page": issues,
    "license": rootProject.mod_license,
    "minecraft_dependency": rootProject.fabric_minecraft_dependency
]

processResources {
    props.forEach { k, v ->
        inputs.property k, v
    }

    filesMatching("fabric.mod.json") {
        expand props
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}
